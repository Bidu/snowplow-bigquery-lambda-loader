{
  "name": "events-intercept",
  "version": "2.0.0",
  "description": "event interceptors - like middleware for EventEmitter",
  "main": "lib/events-intercept.js",
  "scripts": {
    "test": "mocha test",
    "posttest": "istanbul cover _mocha -- -R spec",
    "coveralls": "istanbul cover _mocha --report lcovonly -- -R spec && cat ./coverage/lcov.info | coveralls && rm -rf ./coverage"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/brandonhorst/events-intercept.git"
  },
  "keywords": [
    "event",
    "events",
    "emit",
    "intercept",
    "tap",
    "hook",
    "report",
    "mutate",
    "EventEmitter"
  ],
  "author": {
    "name": "@brandonhorst"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/brandonhorst/events-intercept/issues"
  },
  "homepage": "https://github.com/brandonhorst/events-intercept",
  "devDependencies": {
    "chai": "^1.10.0",
    "coveralls": "^2.11.2",
    "istanbul": "^0.3.5",
    "mocha": "^2.1.0",
    "sinon": "^1.12.2",
    "sinon-chai": "^2.6.0"
  },
  "readme": "#`events-intercept`\n\n[![Build Status](https://travis-ci.org/brandonhorst/events-intercept.svg?branch=master)](https://travis-ci.org/brandonhorst/events-intercept)\n[![Coverage Status](https://coveralls.io/repos/brandonhorst/events-intercept/badge.png?branch=master)](https://coveralls.io/r/brandonhorst/events-intercept?branch=master)\n\nThe node [EventEmitter](http://nodejs.org/api/events.html) is very powerful. However, at times it could be valuable to intercept events before they reach their handlers, to modify the data, or emit other events. That's a job for `event-intercept`.\n\n##Installation\n\n```sh\nnpm install events-intercept\n```\n\n##Standalone Usage\n\nThe module contains a constructor, `EventEmitter`, which inherits from the standard node `events.EventEmitter`.\n\n\tvar EventEmitter = require('events-intercept').EventEmitter;\n\tvar emitter = new EventEmitter();\n\nIn our application, we have an object that will emit a `data` event, and pass it a single argument.\n\n\temitter.emit('data', 'myData')\n\nIt is very easy to listen for this event and handle it\n\n\temitter.on('data', function(arg) {\n\t\tconsole.log(arg);\n\t}); //logs 'myData'\n\nHowever, we want to intercept that event and modify the data. We can do that by setting an `interceptor` with `intercept(event, interceptor)`. It is passed all arguments that would be passed to the emitter, as well as a standard node callback. In this case, let's just add a prefix on to the data.\n\n\temitter.intercept('data', function(arg, done) {\n\t\treturn done(null, 'intercepted ' + arg);\n\t});\n\nThis code will be executed before the handler, and the new argument will be passed on to the handler appropriately.\n\n\temitter.emit('data', 'some other data');\n\t//logs 'intercepted some other data'\n\nIf multiple interceptors are added to a single event, they will be called in the order that they are added, like [async.waterfall](https://github.com/caolan/async#waterfall).\n\nHere's that sample code all together. Of course, `intercept` supports proper function chaining.\n\n\tvar eventsIntercept = require('events-intercept');\n\tvar emitter = new eventsIntercept.EventEmitter();\n\n\temitter\n\t.on('data', function(arg) {\n\t\tconsole.log(arg);\n\t}).intercept('data', function(arg, done) {\n\t\treturn done(null, 'intercepted ' + arg);\n\t}).emit('data', 'myData');\n\t//logs 'intercepted myData'\n\nPlease see `test/intercept.js` for more complete samples.\n\n##Calling Separate Events\n\nThere may be times when you want to intercept one event and call another. Luckily, all `intercept` handlers are called with the `EventEmitter` as the `this` context, so you can `emit` events yourself.\n\n\temitter.intercept('data', function(done) {\n\t\tthis\n\t\t.emit('otherData')\n\t\t.emit('thirdData');\n\t\treturn done(null);\n\t});\n\t//emits 'data', 'otherData', and 'thirdData'\n\nRemember, `emit`ting an event that you are `intercept`ing will cause a loop, so be careful.\n\nIn fact, an `intercept`or do not need to call the callback at all, which means that the event that was `intercept`ed will never be called at all.\n\n\n\temitter.intercept('data', function(done) {\n\t\tthis\n\t\t.emit('otherData')\n\t\t.emit('thirdData');\n\t});\n\t//emits 'otherData' and 'thirdData' but not 'data'\n\n##Utilities\n\n`events-intercept` supports all of the useful utilities that the standard `EventEmitter` supports:\n\n* `interceptors(type)` returns an array of all interceptors (functions) for the given type.\n* `removeInterceptor(type, interceptor)` removes an interceptor of a given type. You must pass in the interceptor function.\n* `removeAllInterceptors(type)` removes all interceptors for a given type.\n* `removeAllInterceptors()` removes all interceptors. Will remove the `removeInterceptor` event last, so they will all get triggered.\n* the EventEmitter will throw a warning if more than 10 interceptors are added to a single event, as this could represent a memory leak. `setMaxInterceptors(n)` allows you to change that. Set it to 0 for no limit.\n\nAll of these are demonstrated in the tests.\n\n##Patching\n\nOf course, many EventEmitters that you have the pleasure of using will not have the foresight to use `event-intercept`. Thankfully, Javascript is awesome, it's possible to monkey patch the interception capabilities onto an existing object. Just call\n\n\tvar events = require('events');\n\tvar eventsIntercept = require('events-intercept');\n\n\tvar emitter = new events.EventEmitter();\n\n\teventsIntercept.patch(emitter)\n\n\temitter\n\t.on('data', function(arg) {\n\t\tconsole.log(arg);\n\t}).intercept('data', function(arg, done) {\n\t\treturn done(null, 'intercepted ' + arg);\n\t}).emit('data', 'myData');\n\t//logs 'intercepted myData'\n\nNow, you should be able to call `intercept` on the standard `EventEmitter`.\n\nThis is also shown in `test/intercept.js`.\n",
  "readmeFilename": "README.md",
  "_id": "events-intercept@2.0.0",
  "_shasum": "adbf38681c5a4b2011c41ee41f61a34cba448897",
  "_resolved": "https://registry.npmjs.org/events-intercept/-/events-intercept-2.0.0.tgz",
  "_from": "https://registry.npmjs.org/events-intercept/-/events-intercept-2.0.0.tgz"
}
