{
  "name": "dns-zonefile",
  "version": "0.1.18",
  "description": "A DNS zone file parser and generator.",
  "main": "./lib/zonefile.js",
  "bin": {
    "zonefile": "./bin/zonefile"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/elgs/dns-zonefile.git"
  },
  "keywords": [
    "DNS",
    "zone"
  ],
  "author": {
    "name": "Elgs Chen"
  },
  "license": "ISC",
  "contributors": [
    {
      "name": "William Ferrell",
      "email": "willfe@gmail.com"
    },
    {
      "name": "Christoph Witzko",
      "email": "github@christophwitzko.com"
    },
    {
      "name": "Lance Hudson",
      "email": "lance@lancehudson.com"
    },
    {
      "name": "Rouven WeÃŸling"
    },
    {
      "name": "Sebastian Vollnhals"
    },
    {
      "name": "Chris Flook"
    },
    {
      "name": "Stephen Sawchuk",
      "email": "sawchuk@gmail.com"
    },
    {
      "name": "Mayo Jordanov"
    },
    {
      "name": "Ben Speakman"
    }
  ],
  "readme": "dns-zonefile\n============\nAn [RFC1035 compliant](http://www.ietf.org/rfc/rfc1035.txt) DNS zone file\nparser and generator for Node.js and browser.\n\n# Installation\n\n## Bower Install\n\n`bower install dns-zonefile --save`\n\n## Standalone\n\n`sudo npm install dns-zonefile -g`\n\n## Module\n\n`npm install dns-zonefile`\n\n# Usage\n\n## Zone Information\n\n_dns-zonefile_ accepts both zone data expressed as a JSON object or plain text\nzone file. It supports `SOA`, `NS`, `A`, `AAAA`, `CNAME`, `MX`, `PTR`, `SRV` and `TXT` record types\nas well as the `$ORIGIN` keyword (for zone-wide use only). Each record type\n(and the `$ORIGIN` keyword) is optional, though _bind_ expects to find at least\nan `SOA` record in a valid zone file.\n\n### Examples\n\n#### Forward DNS Zone\n\nThe following JSON produces a zone file for a forward DNS zone:\n\n```json\n{\n    \"$origin\": \"MYDOMAIN.COM.\",\n    \"$ttl\": 3600,\n    \"soa\": {\n        \"mname\": \"NS1.NAMESERVER.NET.\",\n        \"rname\": \"HOSTMASTER.MYDOMAIN.COM.\",\n        \"serial\": \"{time}\",\n        \"refresh\": 3600,\n        \"retry\": 600,\n        \"expire\": 604800,\n        \"minimum\": 86400\n    },\n    \"ns\": [\n        { \"host\": \"NS1.NAMESERVER.NET.\" },\n        { \"host\": \"NS2.NAMESERVER.NET.\" }\n    ],\n    \"a\": [\n        { \"name\": \"@\", \"ip\": \"127.0.0.1\" },\n        { \"name\": \"www\", \"ip\": \"127.0.0.1\" },\n        { \"name\": \"mail\", \"ip\": \"127.0.0.1\" }\n    ],\n    \"aaaa\": [\n        { \"ip\": \"::1\" },\n        { \"name\": \"mail\", \"ip\": \"2001:db8::1\" }\n    ],\n    \"cname\":[\n        { \"name\": \"mail1\", \"alias\": \"mail\" },\n        { \"name\": \"mail2\", \"alias\": \"mail\" }\n    ],\n    \"mx\":[\n        { \"preference\": 0, \"host\": \"mail1\" },\n        { \"preference\": 10, \"host\": \"mail2\" }\n    ],\n    \"txt\":[\n        { \"name\": \"txt1\", \"txt\": \"hello\" },\n        { \"name\": \"txt2\", \"txt\": \"world\" }\n    ],\n    \"srv\":[\n        { \"name\": \"_xmpp-client._tcp\", \"target\": \"jabber\", \"priority\": 10, \"weight\": 0, \"port\": 5222 },\n        { \"name\": \"_xmpp-server._tcp\", \"target\": \"jabber\", \"priority\": 10, \"weight\": 0, \"port\": 5269 }\n    ]\n}\n```\n\n_dns-zonefile_ will produce the following zone file from the above information,\nwhile the following zone file can as well be parsed to produce the zone file\nlike above:\n\n```\n; Zone: MYDOMAIN.COM.\n; Exported  (yyyy-mm-ddThh:mm:ss.sssZ): 2014-09-22T21:10:36.697Z\n\n$ORIGIN MYDOMAIN.COM.\n$TTL 3600\n\n; SOA Record\n@\t \t\tIN\tSOA\tNS1.NAMESERVER.NET.\tHOSTMASTER.MYDOMAIN.COM.\t(\n\t\t\t1411420237\t ;serial\n\t\t\t3600\t ;refresh\n\t\t\t600\t ;retry\n\t\t\t604800\t ;expire\n\t\t\t86400\t ;minimum ttl\n)\n\n; NS Records\n@\tIN\tNS\tNS1.NAMESERVER.NET.\n@\tIN\tNS\tNS2.NAMESERVER.NET.\n\n; MX Records\n@\tIN\tMX\t0\tmail1\n@\tIN\tMX\t10\tmail2\n\n; A Records\n@\tIN\tA\t127.0.0.1\nwww\tIN\tA\t127.0.0.1\nmail\tIN\tA\t127.0.0.1\n\n; AAAA Records\n@\tIN\tAAAA\t::1\nmail\tIN\tAAAA\t2001:db8::1\n\n; CNAME Records\nmail1\tIN\tCNAME\tmail\nmail2\tIN\tCNAME\tmail\n\n; TXT Records\ntxt1\tIN\tTXT\t\"hello\"\ntxt2\tIN\tTXT\t\"world\"\n\n; SRV Records\n_xmpp-client._tcp\tIN\tSRV\t10\t0\t5222\tjabber\n_xmpp-server._tcp\tIN\tSRV\t10\t0\t5269\tjabber\n```\n\n### Reverse DNS Zone\n\nThis JSON will produce a zone file for a reverse DNS zone (the `$ORIGIN`\nkeyword is recommended for reverse DNS zones):\n\n```json\n{\n\t\"$origin\": \"0.168.192.IN-ADDR.ARPA.\",\n\t\"$ttl\": 3600,\n\t\"soa\": {\n\t\t\"mname\": \"NS1.NAMESERVER.NET.\",\n\t\t\"rname\": \"HOSTMASTER.MYDOMAIN.COM.\",\n\t\t\"serial\": \"{time}\",\n\t\t\"refresh\": 3600,\n\t\t\"retry\": 600,\n\t\t\"expire\": 604800,\n\t\t\"minimum\": 86400\n\t},\n  \"ns\": [\n      { \"host\": \"NS1.NAMESERVER.NET.\" },\n      { \"host\": \"NS2.NAMESERVER.NET.\" }\n  ],\n  \"ptr\":[\n      { \"name\": 1, \"host\": \"HOST1.MYDOMAIN.COM.\" },\n      { \"name\": 2, \"host\": \"HOST2.MYDOMAIN.COM.\" }\n  ]\n}\n```\n\n_dns-zonefile_ will produce the following zone file from the above information,\nwhile the following zone file can as well be parsed to produce the zone file\nlike above:\n\n```\n; Zone: 0.168.192.IN-ADDR.ARPA.\n; Exported  (yyyy-mm-ddThh:mm:ss.sssZ): 2014-09-22T21:10:36.698Z\n\n$ORIGIN 0.168.192.IN-ADDR.ARPA.\n$TTL 3600\n\n; SOA Record\n@\t \t\tIN\tSOA\tNS1.NAMESERVER.NET.\tHOSTMASTER.MYDOMAIN.COM.\t(\n\t\t\t1411420237\t ;serial\n\t\t\t3600\t ;refresh\n\t\t\t600\t ;retry\n\t\t\t604800\t ;expire\n\t\t\t86400\t ;minimum ttl\n)\n\n; NS Records\n@\tIN\tNS\tNS1.NAMESERVER.NET.\n@\tIN\tNS\tNS2.NAMESERVER.NET.\n\n; PTR Records\n1\tIN\tPTR\tHOST1.MYDOMAIN.COM.\n2\tIN\tPTR\tHOST2.MYDOMAIN.COM.\n```\n\n## Standalone Usage\n\nTo use _dns-zonefile_ to generate a zone file from JSON from the command line,\nplace the desired JSON data in a file (`zonefile_data.json` in this example)\nand run the following command. Note that the resulting zone file will be\nprinted to the console; to save the zone file to disk (`my_zone.conf` in this\nexample), use redirection as in this example:\n\n```\nzonefile -g zonefile_data.json > my_zone.conf\n```\n\nTo use _dns-zonefile_ to parse a zone file to JSON from the command line, place\nthe desired zone file data in a file (`zonefile_data.txt` in this example) and\nrun the following command. Note that the resulting JSON will be printed to the\nconsole; to save the JSON to disk (`my_zone.json` in this example), use\nredirection as in this example:\n\n```\nzonefile -p zonefile_data.txt > my_zone.json\n```\n\nIf the `-g` and `-p` are omitted, `-g` will be assumed if the lower cased\nfilename contains `.json`, otherwise, `-p` will be assumed.\n\n`zonefile -v` or `zonefile --version` will print the version information.\n\n## Module Usage\n\n_dns-zonefile_ can also be used as a module. Simply use `require()` to include\nit, then invoke its `generate()` function as shown in the following example:\n\n```javascript\nvar zonefile = require('dns-zonefile');\nvar options = require('./zonefile_forward.json');\nvar output = zonefile.generate(options);\nconsole.log(output);\n```\n\n`options` can either be a parsed JSON object as shown above, or a regular\nJavascript object containing the same required fields.\n\nIt is also possible to parse a zone file to JSON by invoking its `parse()`\nfunction as shown in the following example:\n\n```javascript\nvar zonefile = require('dns-zonefile');\nvar text = fs.readFileSync('./zonefile_forward.txt', 'utf8');\noutput = zonefile.parse(text);\nconsole.log(JSON.stringify(output));\n```\n\n#License\nISC License (ISC)\n\nCopyright (c) 2014, Elgs Qian Chen\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted, provided that the above\ncopyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/elgs/dns-zonefile/issues"
  },
  "homepage": "https://github.com/elgs/dns-zonefile#readme",
  "_id": "dns-zonefile@0.1.18",
  "_shasum": "7569c7371dbdfd50bf8e53e2da0740679292299e",
  "_resolved": "https://registry.npmjs.org/dns-zonefile/-/dns-zonefile-0.1.18.tgz",
  "_from": "https://registry.npmjs.org/dns-zonefile/-/dns-zonefile-0.1.18.tgz"
}
